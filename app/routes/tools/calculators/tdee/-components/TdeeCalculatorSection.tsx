import { Button } from "@/components/ui/button";
import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
	Select,
	SelectContent,
	SelectItem,
	SelectTrigger,
	SelectValue,
} from "@/components/ui/select";
import { GENDERS } from "@/constants/genders";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";

const ACTIVITY_LEVELS = [
	{ value: 1.2, label: "üè¢ ‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏•‡∏¢ (‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô)" },
	{ value: 1.375, label: "üö∂‚Äç‚ôÇÔ∏è ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ (1‚Äì2 ‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)" },
	{ value: 1.55, label: "üèÉ‚Äç‚ôÇÔ∏è ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (3‚Äì5 ‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)" },
	{ value: 1.725, label: "üí™ ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏Å (6‚Äì7 ‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)" },
	{ value: 1.9, label: "üî• ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å (‡πÄ‡∏ä‡πâ‡∏≤‚Äì‡πÄ‡∏¢‡πá‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏á‡∏≤‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏á‡πÄ‡∏¢‡∏≠‡∏∞)" },
];

const FormSchema = z.object({
	gender: z.enum(["male", "female"]),
	age: z.number({
		message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏",
	}),
	weight: z.number({
		message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
	}),
	height: z.number({
		message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
	}),
	activity: z.number({
		message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
	}),
});

type FormSchema = z.infer<typeof FormSchema>;

export function TdeeCalculatorSection({
	setTdee,
}: {
	setTdee: (value: number | null) => void;
}) {
	const form = useForm<FormSchema>({
		resolver: zodResolver(FormSchema),
		defaultValues: {
			gender: "male",
			age: "" as unknown as number,
			weight: "" as unknown as number,
			height: "" as unknown as number,
			activity: 1.2 as number,
		},
	});

	const onSubmit = (data: FormSchema) => {
		const heightMeters = data.height / 100; // Convert cm to m
		const bmr =
			data.gender === "male"
				? 10 * data.weight + 6.25 * heightMeters - 5 * data.age + 5
				: 10 * data.weight + 6.25 * heightMeters - 5 * data.age - 161;
		const tdee = bmr * data.activity;
		return setTdee(tdee);
	};

	const handleResetClick = () => {
		form.reset();
		setTdee(null);
	};

	return (
		<section>
			<Form {...form}>
				<form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
					<FormField
						control={form.control}
						name="gender"
						render={({ field: { value, onChange } }) => (
							<FormItem>
								<FormLabel>‡πÄ‡∏û‡∏®</FormLabel>
								<FormControl>
									<RadioGroup
										onValueChange={onChange}
										defaultValue={value}
										className="flex gap-4"
									>
										{GENDERS.map((gender) => (
											<div className="flex items-center gap-2">
												<RadioGroupItem
													value={gender.value}
													id={gender.value}
												/>
												<Label htmlFor={gender.value}>{gender.name}</Label>
											</div>
										))}
									</RadioGroup>
								</FormControl>
								<FormMessage />
							</FormItem>
						)}
					/>
					<div className="grid items-start sm:grid-cols-2 lg:grid-cols-3 gap-4">
						<FormField
							control={form.control}
							name="age"
							render={({ field }) => (
								<FormItem>
									<FormLabel>‡∏≠‡∏≤‡∏¢‡∏∏</FormLabel>
									<FormControl>
										<Input
											type="number"
											{...field}
											onChange={(e) => field.onChange(e.target.valueAsNumber)}
										/>
									</FormControl>
									<FormMessage />
								</FormItem>
							)}
						/>
						<FormField
							control={form.control}
							name="weight"
							render={({ field }) => (
								<FormItem>
									<FormLabel>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)</FormLabel>
									<FormControl>
										<Input
											type="number"
											{...field}
											onChange={(e) => field.onChange(e.target.valueAsNumber)}
										/>
									</FormControl>
									<FormMessage />
								</FormItem>
							)}
						/>
						<FormField
							control={form.control}
							name="height"
							render={({ field }) => (
								<FormItem>
									<FormLabel>‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)</FormLabel>
									<FormControl>
										<Input
											type="number"
											{...field}
											onChange={(e) => field.onChange(e.target.valueAsNumber)}
										/>
									</FormControl>
									<FormMessage />
								</FormItem>
							)}
						/>
					</div>
					<FormField
						control={form.control}
						name="activity"
						render={({ field }) => (
							<FormItem>
								<FormLabel>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</FormLabel>
								<FormControl>
									<Select
										defaultValue={field.value.toString()}
										onValueChange={(value) => field.onChange(Number(value))}
									>
										<SelectTrigger className="w-full">
											<SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" />
										</SelectTrigger>
										<SelectContent>
											{ACTIVITY_LEVELS.map((level) => (
												<SelectItem
													key={level.value}
													value={level.value.toString()}
												>
													{level.label}
												</SelectItem>
											))}
										</SelectContent>
									</Select>
								</FormControl>
								<FormMessage />
							</FormItem>
						)}
					/>
					<div className="space-x-2">
						<Button>‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</Button>
						<Button type="button" onClick={handleResetClick} variant="outline">
							‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
						</Button>
					</div>
				</form>
			</Form>
		</section>
	);
}
