import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { createFileRoute } from "@tanstack/react-router";
import { useState } from "react";

import ToolLayout from "@/components/tool-layout";
import { seo } from "@/utils/seo";

export const Route = createFileRoute("/tools/calculators/tdee")({
	component: RouteComponent,
	loader: ({ location }) => loadToolData(location.pathname),
	head: ({ loaderData }) => ({
		meta: [
			...seo({
				title: loaderData.tool.title,
				description: loaderData.tool.description,
				keywords: loaderData.tool.keywords,
			}),
		],
	}),
});

function RouteComponent() {
	const { url, category, tool } = Route.useLoaderData();
	const [tdee, setTdee] = useState<number | null>(null);

	return (
		<ToolLayout
			breadcrumbs={[
				{
					label: category.title,
					href: "..",
				},
				{
					label: tool.title,
					href: tool.url,
				},
			]}
			title={tool.title}
			description={tool.description}
			url={url}
			items={[
				{
					id: "1",
					title: "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
					content: (
						<ol className="list-decimal list-inside space-y-2">
							<li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏ä‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏´‡∏ç‡∏¥‡∏á)</li>
							<li>‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</li>
							<li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô (‡πÄ‡∏ö‡∏≤, ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á, ‡∏´‡∏ô‡∏±‡∏Å ‡∏Ø‡∏•‡∏Ø)</li>
							<li>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡πà‡∏≤ TDEE ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</li>
							<li>‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà? ‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï" ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!</li>
						</ol>
					),
				},
			]}
		>
			<TdeeCalculatorSection setTdee={setTdee} />
			<TdeeDisplaySection tdee={tdee} />
		</ToolLayout>
	);
}

import { Button } from "@/components/ui/button";
import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
	Select,
	SelectContent,
	SelectItem,
	SelectTrigger,
	SelectValue,
} from "@/components/ui/select";
import { GENDERS } from "@/constants/genders";
import { loadToolData } from "@/lib/tool/loadToolData";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";

const ACTIVITY_LEVELS = [
	{ value: 1.2, label: "üè¢ ‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏•‡∏¢ (‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô)" },
	{ value: 1.375, label: "üö∂‚Äç‚ôÇÔ∏è ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ (1‚Äì2 ‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)" },
	{ value: 1.55, label: "üèÉ‚Äç‚ôÇÔ∏è ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (3‚Äì5 ‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)" },
	{ value: 1.725, label: "üí™ ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏Å (6‚Äì7 ‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)" },
	{ value: 1.9, label: "üî• ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å (‡πÄ‡∏ä‡πâ‡∏≤‚Äì‡πÄ‡∏¢‡πá‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏á‡∏≤‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏á‡πÄ‡∏¢‡∏≠‡∏∞)" },
];

const FormSchema = z.object({
	gender: z.enum(["male", "female"]),
	age: z.number({
		message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏",
	}),
	weight: z.number({
		message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
	}),
	height: z.number({
		message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
	}),
	activity: z.number({
		message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
	}),
});

type FormSchema = z.infer<typeof FormSchema>;

export function TdeeCalculatorSection({
	setTdee,
}: {
	setTdee: (value: number | null) => void;
}) {
	const form = useForm<FormSchema>({
		resolver: zodResolver(FormSchema),
		defaultValues: {
			gender: "male",
			age: "" as unknown as number,
			weight: "" as unknown as number,
			height: "" as unknown as number,
			activity: 1.2 as number,
		},
	});

	const onSubmit = (data: FormSchema) => {
		const heightMeters = data.height / 100; // Convert cm to m
		const bmr =
			data.gender === "male"
				? 10 * data.weight + 6.25 * heightMeters - 5 * data.age + 5
				: 10 * data.weight + 6.25 * heightMeters - 5 * data.age - 161;
		const tdee = bmr * data.activity;
		return setTdee(tdee);
	};

	const handleResetClick = () => {
		form.reset();
		setTdee(null);
	};

	return (
		<section>
			<Form {...form}>
				<form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
					<div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-4 items-start">
						<FormField
							control={form.control}
							name="gender"
							render={({ field: { value, onChange } }) => (
								<FormItem>
									<FormLabel>‡πÄ‡∏û‡∏®</FormLabel>
									<FormControl>
										<RadioGroup
											onValueChange={onChange}
											defaultValue={value}
											className="flex gap-4"
										>
											{GENDERS.map((gender) => (
												<div
													key={gender.value}
													className="flex items-center gap-2"
												>
													<RadioGroupItem
														value={gender.value}
														id={gender.value}
													/>
													<Label htmlFor={gender.value}>{gender.name}</Label>
												</div>
											))}
										</RadioGroup>
									</FormControl>
									<FormMessage />
								</FormItem>
							)}
						/>
						<FormField
							control={form.control}
							name="age"
							render={({ field }) => (
								<FormItem>
									<FormLabel>‡∏≠‡∏≤‡∏¢‡∏∏</FormLabel>
									<FormControl>
										<Input
											type="number"
											{...field}
											onChange={(e) => field.onChange(e.target.valueAsNumber)}
										/>
									</FormControl>
									<FormMessage />
								</FormItem>
							)}
						/>
						<FormField
							control={form.control}
							name="weight"
							render={({ field }) => (
								<FormItem>
									<FormLabel>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)</FormLabel>
									<FormControl>
										<Input
											type="number"
											{...field}
											onChange={(e) => field.onChange(e.target.valueAsNumber)}
										/>
									</FormControl>
									<FormMessage />
								</FormItem>
							)}
						/>
						<FormField
							control={form.control}
							name="height"
							render={({ field }) => (
								<FormItem>
									<FormLabel>‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)</FormLabel>
									<FormControl>
										<Input
											type="number"
											{...field}
											onChange={(e) => field.onChange(e.target.valueAsNumber)}
										/>
									</FormControl>
									<FormMessage />
								</FormItem>
							)}
						/>
						<FormField
							control={form.control}
							name="activity"
							render={({ field }) => (
								<FormItem>
									<FormLabel>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</FormLabel>
									<FormControl>
										<Select
											defaultValue={field.value.toString()}
											onValueChange={(value) => field.onChange(Number(value))}
										>
											<SelectTrigger className="w-full">
												<SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" />
											</SelectTrigger>
											<SelectContent>
												{ACTIVITY_LEVELS.map((level) => (
													<SelectItem
														key={level.value}
														value={level.value.toString()}
													>
														{level.label}
													</SelectItem>
												))}
											</SelectContent>
										</Select>
									</FormControl>
									<FormMessage />
								</FormItem>
							)}
						/>
					</div>
					<div className="space-x-2">
						<Button>‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</Button>
						<Button type="button" onClick={handleResetClick} variant="outline">
							‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
						</Button>
					</div>
				</form>
			</Form>
		</section>
	);
}

function TdeeDisplaySection({ tdee }: { tdee: number | null }) {
	return (
		<Card className="text-center">
			<CardHeader>
				<CardTitle>‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (TDEE)</CardTitle>
			</CardHeader>
			<CardContent className="space-y-2">
				<p className="space-x-2">
					<span className="text-8xl text-primary font-semibold">
						{tdee?.toFixed(1) || "?"}
					</span>
					{tdee && <span>‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà</span>}
				</p>
			</CardContent>
		</Card>
	);
}
